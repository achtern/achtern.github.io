{"name":"AchternEngine","tagline":"GraphicsEngine made in Germany","body":"[AchternEngine](https://github.com/achtern/AchternEngine) is a Java 3D Graphics Engine, using OpenGL has backend (LWJGL bindings).\r\n\r\nAchternEngine approaches the concept of a GraphicsEngine differently than many others. Thanks to Java Native Interface the Engine is completely independent of the Graphics-Backend or binding.\r\nThe core package of the engine has no calls to any graphics library, only to it's wrappers, which are getting injected by the user.\r\n\r\nThis allows to be very flexible and theoretically allows the user to write their own Graphics-Backend and hook it into the engine. This however is not fully working at the moment, I guess, at least not so easy to implement, since the wrapper which has to be implemented is heavily influenced by OpenGL and the RenderEngine is following OpenGL conventions and using it's workflow.\r\n\r\n\r\n## Get started - Example\r\n\r\n```java\r\n// Import the entire core package\r\nimport org.achtern.core.*;\r\n// Import the Graphics-Binding. LWJGL 2\r\nimport org.achtern.lwjgl.bootstrap.LWJGLProvider;\r\n\r\n/**\r\n * This is the MainGame class, it should extend 'Game'\r\n */\r\npublic class MyGame extends Game {\r\n    public static void main(String... args) {\r\n        // Create a new CoreEngine, running the MyGame class and with the LWJGL Graphics-Binding\r\n        CoreEngine engine = new CoreEngine(new MyGame(), new LWJGLProvider());\r\n        // Start the Game at a locked 60fps,\r\n        // This will run an infinite loop, which can be stopped,\r\n        // using 'CoreEngine.requestStop()' (note the static call!)\r\n        engine.start(60); // 60fps\r\n    }\r\n\r\n    /**\r\n     * Every Game must provide initial window dimenensions,\r\n     * the window can be resized by the user during the game\r\n     */\r\n    @Override\r\n    public Dimension getWindowDimensions() {\r\n        return new Dimension(1280, 720);\r\n    }\r\n\r\n    /**\r\n     * This will be used as window title.\r\n     */\r\n    @Override\r\n    public String getWindowTitle() {\r\n        return \"MyGame\";\r\n    }\r\n\r\n    /**\r\n     * The init() method gets called, right after a loading screen has been rendered to the screen,\r\n     * The complete engine is fully booted at this point and the Graphics-Binding is fully working.\r\n     */\r\n    @Override\r\n    public void init(CoreEngine engine) {\r\n        // This is adding a new Node to the Scenegraph with a Camera (more on Nodes in the documentation)\r\n        add(new Node(\"Camera\").add(new Camera()));\r\n        // Load a geometry (Figure) from disk and insert it as Node into the scenegraph.\r\n        add(ResourceLoader.getFigure(\"floor\").boxed());\r\n    }\r\n\r\n    /**\r\n     * This is called once every update. Usally you do not need this, only for debugging I guess.\r\n     */\r\n    @Override\r\n    public void update(float delta) {\r\n    }\r\n\r\n    /**\r\n     * This is called during render cycles. Same as update() not needed during production.\r\n     */\r\n    @Override\r\n    public void render(RenderEngine renderEngine) {\r\n    }\r\n\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}